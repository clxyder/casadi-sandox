/* This file was automatically generated by CasADi.
   The CasADi copyright holders make no ownership claim of its contents. */
/* How to prefix internal symbols */
#ifdef CASADI_CODEGEN_PREFIX
  #define CASADI_NAMESPACE_CONCAT(NS, ID) _CASADI_NAMESPACE_CONCAT(NS, ID)
  #define _CASADI_NAMESPACE_CONCAT(NS, ID) NS ## ID
  #define CASADI_PREFIX(ID) CASADI_NAMESPACE_CONCAT(CODEGEN_PREFIX, ID)
#else
  #define CASADI_PREFIX(ID) gen_ ## ID
#endif

#include <math.h>
#include <stdio.h>
#include <string.h>

#ifndef casadi_real
#define casadi_real double
#endif

#ifndef casadi_int
#define casadi_int long long int
#endif

/* Add prefix to internal symbols */
#define casadi_copy CASADI_PREFIX(copy)
#define casadi_f0 CASADI_PREFIX(f0)
#define casadi_f1 CASADI_PREFIX(f1)
#define casadi_s0 CASADI_PREFIX(s0)

/* Symbol visibility in DLLs */
#ifndef CASADI_SYMBOL_EXPORT
  #if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
    #if defined(STATIC_LINKED)
      #define CASADI_SYMBOL_EXPORT
    #else
      #define CASADI_SYMBOL_EXPORT __declspec(dllexport)
    #endif
  #elif defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
    #define CASADI_SYMBOL_EXPORT __attribute__ ((visibility ("default")))
  #else
    #define CASADI_SYMBOL_EXPORT
  #endif
#endif

void casadi_copy(const casadi_real* x, casadi_int n, casadi_real* y) {
  casadi_int i;
  if (y) {
    if (x) {
      for (i=0; i<n; ++i) *y++ = *x++;
    } else {
      for (i=0; i<n; ++i) *y++ = 0.;
    }
  }
}

#ifndef CASADI_PRINTF
#define CASADI_PRINTF printf
#endif

static const casadi_int casadi_s0[6] = {2, 1, 0, 2, 0, 1};

/* f:(i0[2])->(o0[2]) */
static int casadi_f0(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_int i;
  casadi_real *rr;
  const casadi_real *cs;
  casadi_real *w0=w+0;
  /* #0: @0 = input[0][0] */
  casadi_copy(arg[0], 2, w0);
  /* #1: @0 = sin(@0) */
  for (i=0, rr=w0, cs=w0; i<2; ++i) *rr++ = sin( *cs++ );
  /* #2: output[0][0] = @0 */
  casadi_copy(w0, 2, res[0]);
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int f(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f0(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int f_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int f_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void f_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int f_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void f_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void f_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void f_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int f_n_in(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int f_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real f_default_in(casadi_int i){
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* f_name_in(casadi_int i){
  switch (i) {
    case 0: return "i0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* f_name_out(casadi_int i){
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* f_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* f_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int f_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 2;
  if (sz_res) *sz_res = 2;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 2;
  return 0;
}

casadi_int main_f(casadi_int argc, char* argv[]) {
  casadi_int j;
  casadi_real* a;
  const casadi_real* r;
  casadi_int flag;
  casadi_int *iw = 0;
  casadi_real w[6];
  const casadi_real* arg[2];
  casadi_real* res[2];
  arg[0] = w+0;
  res[0] = w+2;
  a = w;
  for (j=0; j<2; ++j) if (scanf("%lg", a++)<=0) return 2;
  flag = f(arg, res, iw, w+4, 0);
  if (flag) return flag;
  r = w+2;
  for (j=0; j<2; ++j) CASADI_PRINTF("%g ", *r++);
  CASADI_PRINTF("\n");
  return 0;
}

/* g:(i0[2])->(o0[2]) */
static int casadi_f1(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_int i;
  casadi_real *rr;
  const casadi_real *cs;
  casadi_real *w0=w+0;
  /* #0: @0 = input[0][0] */
  casadi_copy(arg[0], 2, w0);
  /* #1: @0 = cos(@0) */
  for (i=0, rr=w0, cs=w0; i<2; ++i) *rr++ = cos( *cs++ );
  /* #2: output[0][0] = @0 */
  casadi_copy(w0, 2, res[0]);
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int g(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f1(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int g_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int g_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void g_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int g_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void g_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void g_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void g_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int g_n_in(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int g_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real g_default_in(casadi_int i){
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* g_name_in(casadi_int i){
  switch (i) {
    case 0: return "i0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* g_name_out(casadi_int i){
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* g_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* g_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int g_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 2;
  if (sz_res) *sz_res = 2;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 2;
  return 0;
}

casadi_int main_g(casadi_int argc, char* argv[]) {
  casadi_int j;
  casadi_real* a;
  const casadi_real* r;
  casadi_int flag;
  casadi_int *iw = 0;
  casadi_real w[6];
  const casadi_real* arg[2];
  casadi_real* res[2];
  arg[0] = w+0;
  res[0] = w+2;
  a = w;
  for (j=0; j<2; ++j) if (scanf("%lg", a++)<=0) return 2;
  flag = g(arg, res, iw, w+4, 0);
  if (flag) return flag;
  r = w+2;
  for (j=0; j<2; ++j) CASADI_PRINTF("%g ", *r++);
  CASADI_PRINTF("\n");
  return 0;
}


int main(int argc, char* argv[]) {
  if (argc<2) {
    /* name error */
  } else if (strcmp(argv[1], "f")==0) {
    return main_f(argc-2, argv+2);
  } else if (strcmp(argv[1], "g")==0) {
    return main_g(argc-2, argv+2);
  }
  fprintf(stderr, "First input should be a command string. Possible values: 'f' 'g'\nNote: you may use function.generate_input to create a command string.\n");
  return 1;
}
